⬜️ Summary of the last week

        Chapter 3. Expression and Interactivity.
        - Input statement
                . cin object
        - Type conversion(type upgrade to the largest data type in the expression)
        - Type casting( static_cast<data_type>(variable name) )
        - Overflow and Underflow
                It may lead to the incorrect results without the awareness.
                . not dectected at the compile time(not syntax error)
        - Formatting Output
                . setw(), setprecision()
                . fixed, showpoint
        - Characters and String
                . getline()
                . cin.get()
        - Mathematical Functions
                . #include <cmath>
                  cos(), sin(), ..., rand()
                . #include <cstdlib>
                . #include <ctime>
                  int rdnum;
                  int seed;
                  seed = time(0);
                  srand(seed);
                  rdnum = rand();

⬜️ Today's Learning Outcome
        - Compilation Process(chapter 1)
        - More Programming Labs 
                . Converting the temperature 
                . Calculating the average rainfall 
                . Converting the currency

⬜️ The compilation prcess 

        - The purpose of the compile.
                . to get the excutable code 
                - translates the source code(with high-level language) into the excutable code.
        
        [Step 1] Pre-processing 
                . The preprocessor takes the c++ source code file 
                . and deals with the "#include", "#define" and other propressor directives.
                . the output 
                        the source file with the attached header file and preprocessed contents
                
                . command example to make pre-processing       
                        . use the option -E
                        $ g++ -E program.cpp
        
        [Step 2] Compiling
                . The compiler takes the output(program.i) of pre-propressor.
                . and converts it to the assembly code file.
                . The output 
                        . The assembly code file (program.s)      
                                - the very low-level programming language 
                                - that has a strong correspondence with the machine code.
                . Command example
                        . use option -S 
                        $ g++ -S program.cpp

        [Step 3] Assembly
                . The assembler takes the output of Compiler(program.s) and
                . produces the object code(program.o)
                . The object code file  contains
                        - the machine level instructions(in binary form)
        
                . Command example
                        . use option -c
                        $ g++ -c program.s 
        [Step 4] Linking
                . The linker takes the output of Assembler(program.o) and
                . converts it to the executable file.
                . command example
                        $ g++ program.o
                        // Output file name is "a.out" in Linux "program.exe" in Windows systems.
